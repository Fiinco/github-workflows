name: Golang build to ECR

on:
  workflow_call:
    inputs:
      cmd-name:
        required: true
        type: string
      version:
        required: true
        type: string
      aws-region:
        required: true
        type: string
        default: us-east-1
      go-version:
        required: true
        type: string
        default: 1.18
    secrets:
      github-token:
        required: true
      ecr-key-id:
        required: true
      ecr-key-value:
        required: true

env:
  GOPRIVATE: github.com/Fiinco

jobs:
  golang-build-to-ecr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        if: ${{ success() }}
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - run: go version
        if: ${{ success() }}

      - name: Grant access to private Go Modules
        if: ${{ success() }}
        run: git config --global url."https://fiinco:${{ secrets.github-token }}@github.com/Fiinco".insteadOf "https://github.com/Fiinco"

      - name: Get dependencies
        if: ${{ success() }}
        run: go mod download

      - name: Build Application
        if: ${{ success() }}
        run: go build -ldflags="-s -w" -o ./app ./cmd/${{ inputs.cmd-name }}

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ecr-key-id }}
          aws-secret-access-key: ${{ secrets.ecr-key-value }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        if: ${{ success() }}
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_NAME: ${{ inputs.cmd-name }}
          IMAGE_VERSION: ${{ inputs.version }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_NAME-$IMAGE_VERSION .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_NAME-$IMAGE_VERSION
