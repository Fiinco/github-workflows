name: Golang build to ECR

on:
  workflow_call:
    inputs:
      cmd-name:
        required: true
        type: string
      version:
        required: true
        type: string
      aws-region:
        required: false
        type: string
        default: us-east-1
      go-version:
        required: false
        type: string
        default: '1.20'
    secrets:
      github-token:
        required: true
      ecr-key-id:
        required: true
      ecr-key-value:
        required: true

env:
  GOPRIVATE: github.com/Legalbank

jobs:
  golang-build-to-ecr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        if: ${{ success() }}
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - run: go version
        if: ${{ success() }}

      - name: Grant access to private Go Modules
        if: ${{ success() }}
        run: git config --global url."https://legalbank:${{ secrets.github-token }}@github.com/Legalbank".insteadOf "https://github.com/Legalbank"

      - name: Get dependencies
        if: ${{ success() }}
        run: go mod download

      - name: Build Application (lambda)
        if: ${{ success() && startsWith(github.event.repository.name, 'lambda-go-') }}
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o ./app ./cmd/${{ inputs.cmd-name }}

      - name: Build Application (normal)
        if: ${{ success() && !(startsWith(github.event.repository.name, 'lambda-go-')) }}
        run: go build -ldflags="-s -w" -o ./app ./cmd/${{ inputs.cmd-name }}

      #No passo de "Grant access to private Go Modules" acima, configuramos o arquivo .git/config com uma informação sensível
      #Vamos limpar as pastas do git para que as actions de agora em diante não tenham acesso àquela informação
      - name: Remove .git directory
        if: ${{ success() }}
        run: rm -r .git

      - name: Remove any Dockerfiles
        if: ${{ success() }}
        run: rm -f Dockerfile

      - name: Download Legalbank's official Dockerfile for ecs-golang
        if: ${{ success() && startsWith(github.event.repository.name, 'ecs-go-') }}
        run: wget -O Dockerfile https://raw.githubusercontent.com/Legalbank/github-workflows/main/Dockerfile-ecs-golang

      - name: Download Legalbank's official Dockerfile for lambda-golang
        if: ${{ success() && startsWith(github.event.repository.name, 'lambda-go-') }}
        run: wget -O Dockerfile https://raw.githubusercontent.com/Legalbank/github-workflows/main/Dockerfile-lambda-golang

      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ecr-key-id }}
          aws-secret-access-key: ${{ secrets.ecr-key-value }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        if: ${{ success() }}
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_NAME: ${{ inputs.cmd-name }}
          IMAGE_VERSION: ${{ inputs.version }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_NAME-$IMAGE_VERSION .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_NAME-$IMAGE_VERSION
